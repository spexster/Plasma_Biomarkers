getwd()
getwd()
getwd()
git remote -v
# Create all directories
dir.create("Plasma_Biomarkers", showWarnings = FALSE)
setwd("Plasma_Biomarkers")  # Navigate into the project root
folders <- c(
"data/raw", "data/processed", "data/external",
"R", "notebooks", "output/figures", "output/tables",
"docs", "renv"
)
for (folder in folders) {
dir.create(folder, recursive = TRUE, showWarnings = FALSE)
}
# Verify
list.files(recursive = TRUE)
getwd()  # Should return ".../Plasma_Biomarkers"
list.files(recursive = TRUE)  # Should list all created folders
# Go back to the parent directory
setwd("..")
getwd()  # Should now be "C:/Users/farza/Documents/Plasma_Biomarkers"
list.files(recursive = TRUE)  # Should list all created folders
# Go back to the parent directory
setwd("..")
getwd()  # Should now be "C:/Users/farza/Documents/Plasma_Biomarkers"
# Remove the duplicate folder if it exists (optional)
unlink("Plasma_Biomarkers/Plasma_Biomarkers", recursive = TRUE)
# Create directories in the correct location
folders <- c(
"data/raw", "data/processed", "data/external",
"R", "notebooks", "output/figures", "output/tables",
"docs", "renv"
)
for (folder in folders) {
dir.create(folder, recursive = TRUE, showWarnings = FALSE)
}
list.files(recursive = TRUE)
getwd()
setwd("C:/Users/farza/Documents/Plasma_Biomarkers")
list.dirs()
getwd()
list.dirs(path = ".", full.names = TRUE, recursive = FALSE)
# Remove any problematic folders that might exist
unlink("Plasma_Biomarkers", recursive = TRUE)  # Remove duplicate if exists
# Set working directory to your project
setwd("C:/Users/farza/Documents/Plasma_Biomarkers")
# Remove any problematic folders that might exist
unlink("Plasma_Biomarkers", recursive = TRUE)  # Remove duplicate if exists
for (folder in folders) {
dir.create(file.path(getwd(), folder),
recursive = TRUE,
showWarnings = FALSE)
}
folders <- c(
"data/raw",
"data/processed",
"data/external",
"R",
"notebooks",
"output/figures",
"output/tables",
"docs",
"renv"
)
for (folder in folders) {
dir.create(file.path(getwd(), folder),
recursive = TRUE,
showWarnings = FALSE)
}
list.dirs(recursive = FALSE)  # Should show top-level folders
list.dirs(recursive = TRUE)   # Should show full structure
r
setwd("C:/Users/farza/Documents/Plasma_Biomarkers")
dir.create("test_folder")
list.files()  # Verify test_folder appears
unlink("test_folder", recursive = TRUE)
# Remove all existing project folders to start fresh
folders_to_remove <- c("data", "docs", "notebooks", "output", "R", "renv")
for (folder in folders_to_remove) {
unlink(folder, recursive = TRUE)
}
# Define your folder structure
project_folders <- c(
"data/raw",              # Original scRNA-seq/proteomics files
"data/processed",        # Cleaned datasets
"data/external",         # Reference genomes/annotations
"R",                     # R scripts
"notebooks",             # RMarkdown/Jupyter notebooks
"output/figures",        # PDF/PNG plots
"output/tables",         # Processed results (CSV)
"docs",                  # Manuscript files
"renv"                   # Package management
)
# Create all directories
for (folder in project_folders) {
dir.create(folder, recursive = TRUE, showWarnings = FALSE)
}
# Create all directories
for (folder in project_folders) {
dir.create(folder, recursive = TRUE, showWarnings = FALSE)
}
# Check top-level folders
list.dirs(recursive = FALSE)
# In RStudio Terminal (not console):
system("git init")
system("git add .")
system('git commit -m "Initial folder structure"')
# Create main R script
writeLines("library(Seurat)\nlibrary(tidyverse)", "R/01_main_analysis.R")
# Create a .gitignore
gitignore_content <- c(
".Rhistory", ".RData", ".Rproj.user/",
"data/raw/*", "data/processed/*", "renv/library/"
)
writeLines(gitignore_content, ".gitignore")
# Initialize renv for package management
renv::init()
install.packages("renv")
system('git config --global user.email "your.email@example.com"')
system('git config --global user.email "spexster@yahoo.co.uk"')
system('git config --global user.name "spexster"')
# Verify the Git user email
system('git config --global user.email')
# Verify the Git user name
system('git config --global user.name')
# Initialize renv (after installing it)
renv::init()
# Add all files to Git
system("git add .")
# Make your first commit
system('git commit -m "Initial project setup with folder structure"')
# Verify the commit
system("git log")  # Should show your commit
all(
dir.exists("data/raw"),
dir.exists("R"),
dir.exists("output/figures"),
file.exists(".gitignore"),
file.exists("renv.lock")
)
system("git status")
system("git add .gitignore")
system('git commit -m "Update .gitignore to ignore RStudio temporary files"')
system("git status")
# 2. Remove the files from Git's index (without deleting them locally)
system('git rm --cached -r .Rproj.user/')
# 3. Commit this change
system('git commit -m "Stop tracking RStudio temporary files"')
# 4. Verify they're no longer tracked
system('git status')
system('git rm --cached -r .Rproj.user/')
# 1. First verify the files were properly staged for removal
system('git status')  # Should show .Rproj.user/ as "deleted" in changes to be committed
# 2. Commit the change with a clear message
system('git commit -m "Remove RStudio temporary files from version control"')
# 3. Verify they're no longer tracked
system('git status')  # Should no longer show the .Rproj.user/ modifications
writeLines(c(".Rhistory", ".RData", ".Rproj.user/"), ".gitignore", append = TRUE)
# Read existing .gitignore (if any)
current_ignore <- if(file.exists(".gitignore")) readLines(".gitignore") else character(0)
new_patterns <- c(".Rhistory", ".RData", ".Rproj.user/")
updated_ignore <- unique(c(current_ignore, new_patterns))
# Write back to file
writeLines(updated_ignore, ".gitignore")
# Check .gitignore content
file.show(".gitignore")
# Double-check Git status
system("git status")
# See if .gitignore needs to be committed
system("git diff -- .gitignore")
# 1. Check tracked files (should show no RStudio temp files)
system('git ls-files | grep -E "\.Rproj|\.Rhistory|\.RData"')  # Should return nothing
# 1. Check tracked files (should show no RStudio temp files)
system('git ls-files | grep -E "\.Rproj|\.Rhistory|\.RData"')  # Should return nothing
# 2. Check ignore rules are effective
system('git check-ignore -v .Rproj.user/some_file')  # Should match your ignore pattern
system('git add .gitignore')
system('git commit -m "Confirm RStudio files are ignored"')
# 1. List all tracked files (should show no RStudio temp files)
system('git ls-files')
write("test", ".Rproj.user/testfile.txt")
system('git status')  # Should NOT show the file
unlink(".Rproj.user/testfile.txt")  # Clean up
unlink("test_folder", recursive = TRUE)
# This will show you the entire folder structure, including sub-folders
list.files(recursive = TRUE)
# Display first 10 files and directories
head(list.files(recursive = TRUE), 10)
library(Seurat)
library(tidyverse)
setwd("C:/Users/farza/Documents/Plasma_Biomarkers")
#set seed
set.seed(333)  # Classic choice, but any integer works
library(SeuratDisk)
install.packages("SeuratDisk")
remotes::install_github("mojaveazure/seurat-disk")
library(hdf5r)
save(file = "my_analysis.R", list = c("important_function", "other_object"))save(file = "my_analysis.R", list = c("important_function", "other_object"))
save(file = "my_analysis.R", list = c("important_function", "other_object"))save(file = "my_analysis.R", list = c("important_function", "other_object"))
system("git add .")
system('git commit -m "Add analysis and setup files"')
system("git push origin main")
system("git init")
system("git add .")  # Add all files to the staging area
system('git commit -m "Initial commit with project setup and scripts"')
system('git remote add origin https://github.com/spexster/Plasma_Biomarkers.git')
system('git push -u origin main')
https://github.com/spexster/Plasma_Biomarkers
